import re


PHONES = []
PHONES_SET = {}

CATS = [
    ["–õ—é–¥–∏–Ω–∞ –∑ —ñ–Ω–≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—é", {"–∏–Ω–≤–∞–ª–∏–¥", "—ñ–Ω–≤–∞–ª—ñ–¥"}],
    ["–ü–µ—Ä–µ—Å–µ–ª–µ–Ω—Ü—ñ", {"–ø–µ—Ä–µ—Å–µ–ª–µ–Ω—Ü—ñ", "–≤–ø–æ"}],
    ["–ë–∞–≥–∞—Ç–æ–¥—ñ—Ç–Ω–∞ —Ä–æ–¥–∏–Ω–∞", {"–º–Ω–æ–≥–æ–¥–µ—Ç–Ω–∞—è", "–±–∞–≥–∞—Ç–æ–¥—ñ—Ç–Ω–∞"}],
    ["–†–æ–¥–∏–Ω–∏, —â–æ –≤—Ç—Ä–∞—Ç–∏–ª–∏ –≥–æ–¥—É–≤–∞–ª—å–Ω–∏–∫–∞",
     {"–≤—Ç—Ä–∞—Ç–∏–ª–∏ –≥–æ–¥—É–≤–∞–ª—å–Ω–∏–∫–∞"}],
    ["–û–¥–∏–Ω –≥–æ–¥—É–≤–∞–ª—å–Ω–∏–∫", {"–æ–¥–∏–Ω –≥–æ–¥—É–≤–∞–ª—å–Ω–∏–∫"}],
    ["–ú–∞—Ç–∏-–æ–¥–∏–Ω–∞—á–∫–∞", {"–º–∞–º–∞-–æ–¥–∏–Ω–æ—á–∫–∞", "–º–∞—Ç–∏-–æ–¥–∏–Ω–∞—á–∫–∞"}],
    ["–õ—ñ—Ç–Ω—ñ –ª—é–¥–∏ (75+)", {"–ª—ñ—Ç–Ω—ñ –ª—é–¥–∏ (75+)"}],
    ["–ü–µ–Ω—Å—ñ–æ–Ω–µ—Ä", {"–ø–µ–Ω—Å—ñ–æ–Ω–µ—Ä", "–ø–µ–Ω—Å–∏–æ–Ω–µ—Ä"}]
]

ru = ["—è–Ω–≤", "—Ñ–µ–≤", "–º–∞—Ä", "–∞–ø—Ä", "–º–∞—è", "–∏—é–Ω",
      "–∏—é–ª", "–∞–≤–≥", "—Å–µ–Ω", "–æ–∫—Ç", "–Ω–æ—è", "–¥–µ–∫"]
ua = ["—Å—ñ—á", "–ª—é—Ç", "–±–µ—Ä", "–∫–≤—ñ—Ç", "—Ç—Ä–∞–≤", "—á–µ—Ä–≤",
      "–ª–∏–ø", "—Å–µ—Ä–ø", "–≤–µ—Ä", "–∂–æ–≤", "–ª–∏—Å—Ç", "–≥—Ä—É–¥"]
_ua = ["—Å—ñ—á", "–ª—é—Ç", "–±–µ—Ä", "–∫–≤—ñ", "—Ç—Ä–∞", "—á–µ—Ä",
       "–ª–∏–ø", "—Å–µ—Ä", "–≤–µ—Ä", "–∂–æ–≤", "–ª–∏—Å", "–≥—Ä—É"]


def find_order_number(t):
    no = r'#Ô∏è‚É£?‚Ññ? ?\d* *?\n'
    result = re.search(no, t)
    if result:
        r = result.group()
        r = r.replace('#Ô∏è‚É£', '')
        r = r.replace('‚Ññ', '')
        return int(r)
    return None


def find_categories(t):
    if len(t) > 0:
        categories = []
        for cat in CATS:
            for word in cat[1]:
                if t.lower().__contains__(word):
                    categories.append(cat[0])
                    break
        return categories
    return []


def is_selfpick(t):
    """"""
    keywords = ["—Å–∞–º–æ–≤–∏–≤—ñ–∑", "—Å–∞–º–æ–≤—ã–≤–æ–∑"]
    for word in keywords:
        if t.lower().__contains__(word):
            return True

    return False


def find_phone(t):
    phone = r'(\+?\d{12})|\d{10}'
    result = re.search(phone, t)

    """
    +380971525053
       0971525053
    """
    if result:
        r = result.group()
        if len(r) > 10:
            r = r[2:]
        return int(r)
    return None


def find_address(t):
    """
    Patterns:
        [See comments below]

        [Won't match]
            1-—è –ì–æ—Å–ø–∏—Ç–∞–ª—å–Ω–∞—è, 18
            6 —Å–ª–æ–±–æ–¥—Å–∫–∞—è, 5–∞, –∫–≤.19
    """

    """
        Too generic, so words like match as well, which is wrong.
        But too cool to be simply forgotten

        üì´ –≤—É–ª. –õ–∞–∑—É—Ä–Ω–∞, 50–ê
        üì´ —É–ª. –í—ñ–ª—å–Ω–∞, 58
        üì´ —É–ª. –í–µ–ª–∏–∫–∞ –ú–æ—Ä—Å—å–∫–∞, 58
        –≤—É–ª. –§–∞–ª—ñ—ó–≤—Å—å–∫–∞, 40
        –ø—Ä–æ–≤. –ó–æ—Ä—è–Ω–∏–π, 13
        –ø–µ—Ä. –†–µ–π–¥–æ–≤—ã–π 9–ê
        –≤—É–ª–∏—Ü—è –ú–µ—Ç–∞–ª—É—Ä–≥—ñ–≤, 15
        —É–ª. –ú–æ—Å–∫–æ–≤—Å—å–∫–∞ 50 –∫–≤–∞—Ä—Ç–∏—Ä–∞ 13
        –û—á–∞–∫–æ–≤—Å–∫–∞—è 15
        –ó–∞—Ä–µ—á–Ω–∞—è, 54
        –ú–æ—Å–∫–æ–≤—Å—å–∫–∞ 55 –∫–≤–∞—Ä—Ç–∏—Ä–∞ 12
        –û–∑–µ—Ä–Ω–∞ 1 –ê –∫–≤ 17
        –ö—Ä—ã–ª–æ–≤–∞, 38 –±, –∫–≤.3
        6 —Å–ª–æ–±–æ–¥—Å–∫–∞—è, 5–∞, –∫–≤.19
        –í–∞—Ä–≤–∞—Ä–æ–≤–∫–∞ —É–ª–∏—Ü–∞ –ü–∞—Ä—Ç–∏–∑–∞–Ω—Å–∫–∞—è –¥–æ–º 41
        –ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è, 60/3, –∫–≤. 2
        –≤—É–ª. –ì–µ—Ä–æ—ó–≤ –£–∫—Ä–∞—ó–Ω–∏, 18 –∫–≤. 36
        –ú–∏–∫–æ–ª–∞—ó–≤, –ö—É—Ä–æ—Ä—Ç–Ω–∞ 19, 24
    """
    addr = r'\n(üì´{1} ?)?([–∞-—è—ó—ñ—î“ë]+)?,? ?(((–≤?—É–ª.?)|(–ø—Ä–æ–≤.?)|(–ø–µ—Ä.?)|(–≤—É–ª–∏—Ü—è)|(—É–ª–∏—Ü–∞)) ?)?(\d{1,2})? ?[–∞-—è—ó—ñ—î“ë]+( ?[–∞-—è—ó—ñ—î“ë]+)?,? ?\d{1,4}(\/\d{1,2})? ?[–∞–±–≤–≥–¥]?(,? ?(–∫–≤–∞—Ä—Ç–∏—Ä–∞|–∫–≤.?)? ?\d{1,4})?'
    result = re.search(addr, t, flags=re.IGNORECASE)

    """
        üì´ –≤—É–ª. –õ–∞–∑—É—Ä–Ω–∞, 50–ê
        üì´ —É–ª. –í—ñ–ª—å–Ω–∞, 58
        üì´ —É–ª. –í–µ–ª–∏–∫–∞ –ú–æ—Ä—Å—å–∫–∞, 58
        –≤—É–ª. –§–∞–ª—ñ—ó–≤—Å—å–∫–∞, 40
        –ø—Ä–æ–≤. –ó–æ—Ä—è–Ω–∏–π, 13
        –ø–µ—Ä. –†–µ–π–¥–æ–≤—ã–π 9–ê
        –ø—Ä. –ú–∏—Ä–∞ 9–∞
        –ü—Ä.–ë–æ–≥–æ—è–≤–ª–µ–Ω—Å—å–∫–∏–π  26-–ê
        –≤—É–ª–∏—Ü—è –ú–µ—Ç–∞–ª—É—Ä–≥—ñ–≤, 15
        —É–ª. –ú–æ—Å–∫–æ–≤—Å—å–∫–∞ 50 –∫–≤–∞—Ä—Ç–∏—Ä–∞ 13
        –í–∞—Ä–≤–∞—Ä–æ–≤–∫–∞ —É–ª–∏—Ü–∞ –ü–∞—Ä—Ç–∏–∑–∞–Ω—Å–∫–∞—è –¥–æ–º 41
        –≤—É–ª. –ì–µ—Ä–æ—ó–≤ –£–∫—Ä–∞—ó–Ω–∏, 18 –∫–≤. 36
        —É–ª. –ê—Ä—Ö. –°—Ç–∞—Ä–æ–≤–∞, 6–± –∫–≤65
    """
    # without the first word
    addr = r'\n(üì´{1} ?)?,? ?(((–≤?—É–ª.?)|(–ø—Ä–æ–≤.?)|(–ø–µ—Ä.?)|(–ø—Ä.?)|(–≤—É–ª–∏—Ü—è)|(—É–ª–∏—Ü–∞)) ?)(\d{1,3})? ?[–∞-—è—ó—ñ—î“ë]+\.?( ?[–∞-—è—ó—ñ—î“ë]+)?,? {1,}?\d{1,3}(\/\d{1,2})?( |-)?[–∞–±–≤–≥–¥]?(,? ?(–∫–≤–∞—Ä—Ç–∏—Ä–∞|–∫–≤.?)? ?\d{1,3})?'
    result = re.search(addr, t, flags=re.IGNORECASE)

    if not result:
        """
            –≤—É–ª–∏—Ü—è –ú–µ—Ç–∞–ª—É—Ä–≥—ñ–≤, 15
            –û—á–∞–∫–æ–≤—Å–∫–∞—è 15
            –ó–∞—Ä–µ—á–Ω–∞—è, 54
            –ú–æ—Å–∫–æ–≤—Å—å–∫–∞ 55 –∫–≤–∞—Ä—Ç–∏—Ä–∞ 12
            –û–∑–µ—Ä–Ω–∞ 1 –ê –∫–≤ 17
            –ö—Ä—ã–ª–æ–≤–∞, 38 –±, –∫–≤.3
            –ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è, 60/3, –∫–≤. 2
            –ú–∏–∫–æ–ª–∞—ó–≤, –ö—É—Ä–æ—Ä—Ç–Ω–∞ 19, 24
            –ü–æ—Ç–µ–º–∫–∏–Ω—Å—å–∫–∞, 129–≤
        """
        # 143 chars
        addr = r'\n(üì´{1} ?)?([–∞-—è—ó—ñ—î“ë]+)?,? ?((\d{1,2}\bw)?(-[–∞|—è])?) ?[–∞-—è—ó—ñ—î“ë]+( ?[–∞-—è—ó—ñ—î“ë]+)?,? ?\d{1,3}(\/\d{1,2})? ?[–∞–±–≤–≥–¥]?(,? ?(–∫–≤–∞—Ä—Ç–∏—Ä–∞|–∫–≤.?)? ?\d{1,3})?'
        result = re.search(addr, t, flags=re.IGNORECASE)

    if result:
        return result.group().replace("üì´", "").lstrip()
    return None


def parse_year(t):
    """
    returns:
        str<YYYY> || False
    """
    y = r'\d{4}'
    y = re.search(y, t)
    if not y:
        return False
    y = y.group()
    if not y:
        return False

    return y


def parse_dob(t):
    """
    returns:
        str<DD Mon YYYY> || None
    """
    if not t:
        return None
    year = parse_year(t)
    if not year:
        return None

    t = t.split(year)

    for item in t:
        if not item:
            continue
        t = item
        break

    if t.__contains__('.'):
        # numeric
        t = t.strip().strip('.').split('.')

        if len(t) != 2:
            t = t[0].split(' ')

        day = int(t[0])
        mon = int(t[1])
        return f'{day} {ua[mon - 1]} {year}'
    else:
        # num + word || year only
        valid = set(t)
        if not valid.pop():
            # year only
            return f'{year}'

        num = r'\d{1,2}'
        num = re.search(num, t)
        if num:
            num = num.group()
        else:
            return None

        delim = len(num)
        day = int(t[:delim].strip())
        mon = t[delim:].strip()[:3]

        if mon in _ua:
            return f'{day} {ua[_ua.index(mon)]} {year}'
        if mon in ru:
            return f'{day} {ua[ru.index(mon)]} {year}'

    return None


def find_dob(t):
    """
    Patterns:
        <UA occurances>
         17 –ª–∏–ø–Ω—è 1941
         01–ª—é—Ç–æ–≥–æ1947
         26 —Å–µ—Ä–ø–Ω—è1958
         22–ª–∏—Å—Ç–æ–ø–∞–¥–∞ 1930

        <RU occurances>
         17 –º–∞—è 1941
         01—Ñ–µ–≤—Ä–∞–ª—è1947
         26 –∞–≤–≥—É—Å—Ç–∞1958
         22–Ω–æ—è–±—Ä—è 1930

        <DD.MM.YYYY>
         01.09.1970

        <YYYY.DD.MM>
         1985.13.04

        <D.MM.YYYY>
         1.09.1970

        <YYYY.DD.MM>
         1985.13.04

        <YYYY>
         1970
    Returns:
        None or [1936, 01.09.1970, ...]
    """
    # 01.09.1970 <DD.MM.YYYY>
    dob = r'(0[1-9]|[12][0-9]|3[01])[- \..](0[1-9]|1[012])[- \..](19|20)\d\d'
    result = re.search(dob, t)

    if not result:
        # 1.09.1970 <D.MM.YYYY>
        dob = r'([1-9]|[12][0-9]|3[01])[- \..](0[1-9]|1[012])[- \..](19|20)\d\d'
        result = re.search(dob, t)

    if not result:
        # 1985.13.04 <YYYY.DD.MM>
        dob = r'(19|20)\d\d\.(0[1-9]|[12][0-9]|3[01]).(0[1-9]|1[012])'
        result = re.search(dob, t)

    if not result:
        # RU text date <DD M YYYY> or <DDMYYYY>
        """ 17 –º–∞—è 1941
            01—Ñ–µ–≤—Ä–∞–ª—è1947
            26 –∞–≤–≥—É—Å—Ç–∞1958
            22–Ω–æ—è–±—Ä—è 1930
        """
        dob = r'(0?[1-9]|[12][0-9]|3[01]) ?(—è–Ω–≤(?:–∞—Ä—è)?|—Ñ–µ–≤(?:—Ä–∞–ª—è)?|–º–∞—Ä(?:—Ç–∞)?|–∞–ø—Ä(?:–µ–ª—è)?|–º–∞—è|–∏—é–Ω(?:—è)?|–∏—é–ª(?:—è)?|–∞–≤–≥(?:—É—Å—Ç–∞)?|—Å–µ–Ω(?:—Ç—è–±—Ä—è)?|–æ–∫—Ç(?:—è–±—Ä—è)?|–Ω–æ—è(?:–±—Ä—è)?|–¥–µ–∫(?:–∞–±—Ä—è)?) ?(19|20)\d\d'
        result = re.search(dob, t)

    if not result:
        # UA text date <DD MM YYYY> or <DDMMYYYY>
        """ 17 –ª–∏–ø–Ω—è 1941
            01–ª—é—Ç–æ–≥–æ1947
            26 —Å–µ—Ä–ø–Ω—è1958
            22–ª–∏—Å—Ç–æ–ø–∞–¥–∞ 1930
        """
        dob = r'(0?[1-9]|[12][0-9]|3[01]) ?(—Å—ñ—á(:?–Ω—è)?|–ª—é—Ç(?:–æ–≥–æ)?|–±–µ—Ä(?:–µ–∑–Ω—è)?|–∫–≤—ñ—Ç(?:–Ω—è)?|—Ç—Ä–∞–≤(?:–Ω—è)?|—á–µ—Ä–≤(?:–Ω—è)?|–ª–∏–ø(?:–Ω—è)?|—Å–µ—Ä–ø(?:–Ω—è)?|–≤–µ—Ä(?:–µ—Å–Ω—è)?|–∂–æ–≤—Ç(?:–Ω—è)?|–≥—Ä—É–¥(?:–Ω—è)?|–ª–∏—Å—Ç(?:–æ–ø–∞–¥–∞)?) ?(19|20)\d\d'
        result = re.search(dob, t)

    if not result:
        # 1970 <YYYY>
        dob = r'(19|20)\d\d'
        result = re.search(dob, t)

    if result:
        return result.group()
    return None


def find_pib(text):
    """
        –ü–Ü–ë

        –í'—é–Ω –í'—è—á–µ—Å–ª–∞–≤ –î–µ–º'—è–Ω–æ–≤–∏—á
        –£—Ä–æ–≤–∞ –û–ª–µ–Ω–∞ –ú–∏—Ö–∞–π–ª—ñ–≤–Ω–∞
        –ì–õ–£–•–ò–• –ê–ù–ù–ê –ê–õ–ï–ö–°–ï–ï–í–ù–ê
        –ó–∞—è—Ü –ê.–û
    """
    text = str(text)
    text = text.replace('–Å', '–ï')
    text = text.replace('—ë', '–µ')
    text = re.sub(r'\s+', ' ', text)  # removes double spaces
    name = None

    # –á–Ü–Ñ“ê' —ó—ñ—î“ë'
    pattern = r"((\b[–ê-–Ø–á–Ü–Ñ“ê][^–ê-–Ø–á–Ü–Ñ“ê\s\.\,][–∞-—è—ó—ñ—î“ë']*)(\s+)([–ê-–Ø–á–Ü–Ñ“ê][–∞-—è—ó—ñ—î“ë']*)(\.+\s*|\s+)([–ê-–Ø–á–Ü–Ñ“ê][–∞-—è—ó—ñ—î“ë']*))"

    name = re.findall(pattern, text)
    if name:
        PIB = name[0][0].replace('.', ' ')
        PIB = re.sub(r'\s+', ' ', PIB).split(' ')
        if len(PIB) >= 3:
            return PIB[0], PIB[1], PIB[2]
        elif len(PIB) == 2:
            return PIB[0], PIB[1], None
        elif len(PIB) == 1:
            return PIB[0], None, None
    else:
        return None, None, None


collection = []


def parse_msg_for_record(data):
    if data:
        record = {}

        date = data["date"]
        # f'{date:%Y-%m-%d}T{date:%H:%M:%S}+00:00'
        fmtdate = f'{date:%Y-%m-%d}T{date:%H:%M:%S}+00:00'

        record["Date"] = fmtdate
        record["OrderNumber"] = find_order_number(data["text"])
        record["PIB"] = find_pib(data["text"])
        record["Bday"] = parse_dob(find_dob(data["text"]))
        record["Phone"] = find_phone(data["text"])
        record["Address"] = find_address(data["text"])
        record["Categories"] = find_categories(data["text"])
        record["SelfPickup"] = is_selfpick(data["text"])
        record["RawMessage"] = data["text"]
        # print(record)

        return record
