import configparser
from datetime import datetime
import pytz
import traceback
import re
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
from pymongo import DESCENDING, MongoClient
from pymongo.server_api import ServerApi

from src.helpers.auth import is_permitted
from src.helpers.bday import parse_dob
from src.helpers.msg_parser import parse_msg_for_record
from src.helpers.project_root import project_root

"""
[Commands]:

start - –ó–Ω–∞–π–æ–º—Å—Ç–≤–æ
create_order - –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞—è–≤–∫—É
find_by_phone - –®—É–∫–∞—Ç–∏ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É
find_by_name - –®—É–∫–∞—Ç–∏ –∑–∞ —ñ–º'—è–º
find_by_dob - –®—É–∫–∞—Ç–∏ –∑–∞ –¥–∞—Ç–æ—é –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
find_by_address - –®—É–∫–∞—Ç–∏ –∑–∞ –∞–¥—Ä–µ—Å–æ—é
find_by_order - –®—É–∫–∞—Ç–∏ –∑–∞ –Ω–æ–º–µ—Ä–æ–º –∑–∞—è–≤–∏
help - –î–æ–∫–ª–∞–¥–Ω–∏–π –ø–µ—Ä–µ–ª—ñ–∫ –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π
"""

TOKEN = None
DB = None

STATE = 0

ORD_NUM = 5
NAME = 10
PHONE = 20
DOB = 30
ADDRESS = 40
CREATE = 50


def reset_state():
    global STATE
    STATE = None


def find_by_order(update, context):
    global STATE
    user = update.message.chat.username
    if is_permitted(user):
        STATE = ORD_NUM
        update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞—è–≤–∏:")


def find_by_phone(update, context):
    global STATE
    user = update.message.chat.username
    if is_permitted(user):
        STATE = PHONE
        update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")


def find_by_dob(update, context):
    global STATE
    user = update.message.chat.username
    if is_permitted(user):
        STATE = DOB
        update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:")


def find_by_name(update, context):
    global STATE
    user = update.message.chat.username
    if is_permitted(user):
        STATE = NAME
        update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è:")


def find_by_address(update, context):
    global STATE
    user = update.message.chat.username
    if is_permitted(user):
        STATE = ADDRESS
        update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É:")


def create_order(update, context):
    global STATE
    user = update.message.chat.username
    if is_permitted(user):
        STATE = CREATE
        update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –∑–∞—è–≤–∫—É, –æ—Å—å –≤–∞–º —à–∞–±–ª–æ–Ω:")
        update.message.reply_text(
            f"#Ô∏è‚É£ –ù—É–º–µ—Ä\n"
            + "üë§ –Ü–º'—è—á–∫–æ\n"
            + "üéà –•–µ–ø–ø—ñ–±—å–æ–∑–¥–µ–π\n"
            + "üì´ –î–æ–º—ñ–≤–∫–∞\n"
            + "üì≤ –¢–µ–ª–µ—Ö–≤–æ–Ω—á–∏–∫\n"
            + "üëµüèª –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –≥—Ä–æ–º–∞–¥—è–Ω\n"
            + "üöó –°–∞–º–æ–≤–∏–≤—ñ–∑ (—è–∫ —î)\n\n"
            + "=== –¢—ñ–ª–æ –ó–∞—è–≤–∫–∏ ===")
        update.message.reply_text(
            "–ö–æ–ø—ñ—é—î–º–æ —à–∞–±–ª–æ–Ω, —Ä–µ–¥–∞–≥—É—î–º–æ –π–æ–≥–æ, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –º–µ–Ω—ñ –≥–æ—Ç–æ–≤—É —Å—é–¥–∏")
        update.message.reply_text(
            f'–Ø–∫—â–æ –∑–∞—è–≤–∫–∞ –∑–±–µ—Ä–µ–≥–ª–∞—Å—è\n'
            + '–∫–æ–ø—ñ—é—î–º–æ —ó—ó –¥–æ –∫–∞–Ω–∞–ª—É\n'
            + 'üöë –ó–∞–¥–∞—á–∏ NikoVolunteers')


def reply_for_search(reply, **kvargs):
    reply(
        f"#Ô∏è‚É£ {kvargs['num']}\n"
        + f"üë§ {kvargs['name']}\n"
        + f"üéà {kvargs['bday']}\n"
        + f"üì´ {kvargs['addr']}\n"
        + f"üì≤ {kvargs['phone']}\n"
        + f"üëµüèª {kvargs['cats']}\n\n"
        + f"=== ¬´–°–∏—Ä–∞¬ª –ó–∞—è–≤–∫–∞ ===\n\n"
        + f"```\n{kvargs['msg']}```")


def get_ordnum(num):
    query = DB.orders.find({"OrderNumber": num}).sort("Date", DESCENDING)
    try:
        query = query.next()
    except:
        pass
    return query


def get_phone(phone):
    query = DB.orders.find({"Phone": phone}).sort("Date", DESCENDING)
    try:
        query = query.next()
    except:
        pass
    return query


def get_dob(bday):
    query = DB.orders.find({"Bday": bday}).sort("Date", DESCENDING)
    try:
        query = query.next()
    except:
        pass
    return query


def get_address(addr):
    query = DB.orders.find(
        {"Address": {"$regex": re.compile(f'{addr}', re.I)}}).sort("Date", DESCENDING)
    try:
        query = query.next()
    except:
        pass
    return query


def get_name(name):
    query = DB.orders.find({"PIB": {"$all": name}}).sort("Date", DESCENDING)
    try:
        query = query.next()
    except:
        pass
    return query


def compute_date_delta(date):
    # EET  - Estern European Time
    # EEST - summertime, can be ignore since we care only about days
    UATZ = pytz.timezone('EET')

    today = datetime.now(UATZ)
    date = datetime.fromisoformat(date)
    delta = today - date

    return delta.days


def received_address(update, context):
    try:
        addr = update.message.text.strip()
        recs_qty = DB.orders.count_documents(
            {"Address": {"$regex": re.compile(f'{addr}', re.I)}})

        if recs_qty:
            res = get_address(addr)
            num = res["OrderNumber"]
            name = ' '.join(res["PIB"])
            bday = res["Bday"]
            addr = res["Address"]
            msg = res["RawMessage"]
            delt = compute_date_delta(res["Date"])
            phone = '0' + str(res["Phone"])

            cats = ' '.join(res["Categories"]) if len(
                res["Categories"]) > 0 else None

            if recs_qty > 1:
                update.message.reply_text(f"–í—Å—å–æ–≥–æ –∑–∞—è–≤–æ–∫: {recs_qty}")
            if recs_qty > 9:
                update.message.reply_text(f"‚ö†Ô∏è –ó–∞–Ω–∞–¥—Ç–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –∑–∞–ø—Ä–æ—Å ‚ö†Ô∏è")
            update.message.reply_text(f"–î–Ω—ñ–≤ –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∑–∞—è–≤–∫–∏: {delt}")
            reply_for_search(update.message.reply_markdown,
                             num=num, name=name, bday=bday,
                             addr=addr, phone=phone, cats=cats,
                             msg=msg)
            reset_state()
        else:
            update.message.reply_text(f"–ó–∞–ø–∏—Å—ñ–≤ –Ω–µ–º–∞—î")
    except Exception as e:
        update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —ñ–º–µ–Ω—ñ")
        print(f"\n{e}")
        traceback.print_exc()


def received_name(update, context):
    try:
        name = update.message.text.strip()
        if name.__contains__("‚Äò"):
            name = name.replace("‚Äò", "'")
        name = name.split(' ')
        length = len(name)

        q = [""]
        if length == 1:  # Last name
            # DB.orders.find({"PIB": {$all: ["–°–æ—á–æ—Ä–∞–Ω"]}}).pretty()
            q = [f"{name[0]}"]
        elif length == 2:  # First name + Last name
            # DB.orders.find({"PIB": {$all: ["–°–æ—á–æ—Ä–∞–Ω", "–í–ª–∞–¥–∏–º–∏—Ä"]}}).pretty()
            q = [f"{name[0]}", f"{name[1]}"]
        elif length == 3:  # First name + Last name + Father's name
            # DB.orders.find({"PIB": {$all: ["–°–æ—á–æ—Ä–∞–Ω", "–í–ª–∞–¥–∏–º–∏—Ä", "–ò–Ω–¥–∏–≥–æ–≤–∏—á"]}}).pretty()
            q = [f"{name[0]}", f"{name[1]}", f"{name[2]}"]

        recs_qty = DB.orders.count_documents({"PIB": {"$all": q}})

        if recs_qty:
            res = get_name(q)
            num = res["OrderNumber"]
            name = ' '.join(res["PIB"])
            bday = res["Bday"]
            addr = res["Address"]
            msg = res["RawMessage"]
            delt = compute_date_delta(res["Date"])
            phone = '0' + str(res["Phone"])

            cats = ' '.join(res["Categories"]) if len(
                res["Categories"]) > 0 else None

            if recs_qty > 1:
                update.message.reply_text(f"–í—Å—å–æ–≥–æ –∑–∞—è–≤–æ–∫: {recs_qty}")
            update.message.reply_text(
                f"–î–Ω—ñ–≤ –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∑–∞—è–≤–∫–∏: {delt}")
            reply_for_search(update.message.reply_markdown,
                             num=num, name=name, bday=bday,
                             addr=addr, phone=phone, cats=cats,
                             msg=msg)
            reset_state()
        else:
            update.message.reply_text(f"–ó–∞–ø–∏—Å—ñ–≤ –Ω–µ–º–∞—î")
    except Exception as e:
        update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —ñ–º–µ–Ω—ñ")
        print(f"\n{e}")
        traceback.print_exc()


def received_dob(update, context):
    try:
        bday = parse_dob(update.message.text.strip())
        recs_qty = DB.orders.count_documents({"Bday": bday})

        if recs_qty:
            rec = get_dob(bday)
            num = rec["OrderNumber"]
            name = ' '.join(word for word in rec["PIB"] if type(word) == str)
            bday = rec["Bday"]
            addr = rec["Address"]
            msg = rec["RawMessage"]
            delt = compute_date_delta(rec["Date"])
            phone = '0' + str(rec["Phone"])

            cats = ' '.join(rec["Categories"]) if len(
                rec["Categories"]) > 0 else None

            if recs_qty > 1:
                update.message.reply_text(f"–í—Å—å–æ–≥–æ –∑–∞—è–≤–æ–∫: {recs_qty}")
            update.message.reply_text(
                f"–î–Ω—ñ–≤ –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∑–∞—è–≤–∫–∏: {delt}")
            reply_for_search(update.message.reply_markdown,
                             num=num, name=name, bday=bday,
                             addr=addr, phone=phone, cats=cats,
                             msg=msg)
            reset_state()
        else:
            update.message.reply_text(f"–ó–∞–ø–∏—Å—ñ–≤ –Ω–µ–º–∞—î")
    except Exception as e:
        update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏")
        print(f"\n{e}")
        traceback.print_exc()


def received_create(update, context):
    try:
        to_record = parse_msg_for_record(update.message)
        recorded = DB.orders.insert_one(to_record)

        if recorded and recorded.inserted_id:
            update.message.reply_text(f"–£—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
            update.message.reply_text(
                f'–ú–æ–∂–Ω–∞ –∫–æ–ø—ñ—é–≤–∞—Ç–∏ –¥–æ –∫–∞–Ω–∞–ª—É\n'
                + 'üöë –ó–∞–¥–∞—á–∏ NikoVolunteers')
            reset_state()
        else:
            update.message.reply_text(f"–ó–∞—è–≤–∫—É –Ω–µ–º–æ–∂–ª–∏–≤–æ –∑–±–µ—Ä–µ–≥—Ç–∏ :(")
    except Exception as e:
        update.message.reply_text("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ :(")
        print(f"\n{e}")
        traceback.print_exc()


def received_ordnum(update, context):
    try:
        patt = r'\d*'
        num = update.message.text.strip()
        num = re.search(patt, num)
        num = num.group() if num else None

        if not num:
            update.message.reply_text("–ü–æ–º–∏–ª–∫–∞ –≤–≤–æ–¥—É")
            return

        print(num)
        recs_qty = DB.orders.count_documents({"OrderNumber": int(num)})
        if recs_qty:
            rec = get_ordnum(int(num))

            num = rec["OrderNumber"]
            name = ' '.join(word for word in rec["PIB"] if type(word) == str)
            bday = rec["Bday"]
            addr = rec["Address"]
            msg = rec["RawMessage"]
            delt = compute_date_delta(rec["Date"])
            phone = '0' + str(rec["Phone"])

            cats = ' '.join(rec["Categories"]) if len(
                rec["Categories"]) > 0 else None

            if recs_qty > 1:
                update.message.reply_text(f"–í—Å—å–æ–≥–æ –∑–∞—è–≤–æ–∫: {recs_qty}")
            update.message.reply_text(
                f"–î–Ω—ñ–≤ –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∑–∞—è–≤–∫–∏: {delt}")
            reply_for_search(update.message.reply_markdown,
                             num=num, name=name, bday=bday,
                             addr=addr, phone=phone, cats=cats,
                             msg=msg)
            reset_state()
        else:
            update.message.reply_text("–ó–∞–ø–∏—Å—ñ–≤ –Ω–µ–º–∞—î")
    except Exception as e:
        update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∏–π –Ω–æ–º–µ—Ä")
        print(f"\nPhone exception: {e}")
        traceback.print_exc()


def received_phone(update, context):
    try:
        # 097 262 31 68  # 10 digits, starts with 0
        phone = update.message.text.strip()
        phone = ''.join(e for e in phone if e.isnumeric())
        phone = phone[2:] if len(phone) == 12 else phone
        patt = r'\d{9,10}'
        phone = re.search(patt, phone)
        phone = phone.group() if phone else None

        if not phone:
            update.message.reply_text("–ü–æ–º–∏–ª–∫–∞ –≤–≤–æ–¥—É")
            return

        recs_qty = DB.orders.count_documents({"Phone": int(phone)})
        if recs_qty:
            rec = get_phone(int(phone))

            num = rec["OrderNumber"]
            name = ' '.join(word for word in rec["PIB"] if type(word) == str)
            bday = rec["Bday"]
            addr = rec["Address"]
            msg = rec["RawMessage"]
            delt = compute_date_delta(rec["Date"])
            phone = '0' + str(rec["Phone"])

            cats = ' '.join(rec["Categories"]) if len(
                rec["Categories"]) > 0 else None

            if recs_qty > 1:
                update.message.reply_text(f"–í—Å—å–æ–≥–æ –∑–∞—è–≤–æ–∫: {recs_qty}")
            update.message.reply_text(
                f"–î–Ω—ñ–≤ –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∑–∞—è–≤–∫–∏: {delt}")
            reply_for_search(update.message.reply_markdown,
                             num=num, name=name, bday=bday,
                             addr=addr, phone=phone, cats=cats,
                             msg=msg)
            reset_state()
        else:
            update.message.reply_text("–ó–∞–ø–∏—Å—ñ–≤ –Ω–µ–º–∞—î")
    except Exception as e:
        update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∏–π –Ω–æ–º–µ—Ä")
        print(f"\nPhone exception: {e}")
        traceback.print_exc()


def start(update, context):
    # function to handle the /start command
    user = update.message.chat.username
    if is_permitted(user):
        first_name = update.message.chat.first_name
        update.message.reply_text(
            f"–í—ñ—Ç–∞—é {first_name}, —è @nikovolunteerbot!\n"
            + "(a-ka Adjutant)\n"
            + "–¢–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫.\n")
        update.message.reply_text(
            "–Ø –≤–º—ñ—é —à—É–∫–∞—Ç–∏ –∑–∞—è–≤–∫–∏ –∑–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏.\n"
            + "–ê —Ç–∞–∫–æ–∂ –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ —Ç–æ–±—ñ –≤ —ó—Ö —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ.")
        update.message.reply_text(
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –º–µ–Ω—é –∑–ª—ñ–≤–∞\n"
            + "—â–æ–± –æ–±—Ä–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É –∑—ñ —Å–ø–∏—Å–∫—É.")
        update.message.reply_text(
            "–ê–±–æ –æ–±–∏—Ä–∞–π /help –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –∑–Ω–∞–π–æ–º—Å—Ç–≤–∞.")
    else:
        update.message.reply_text("–Ø —Ç–æ–π —â–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑—É—î.\n"
                                  + "–ù–µ—Ö–∞–π –©–∞—Å—Ç–∏—Ç—å!")


def help(update, context):
    # function to handle the /help command
    user = update.message.chat.username
    if is_permitted(user):
        update.message.reply_text(f"–û—Å—å —â–æ —è –≤–º—ñ—é:\n\n"
                                  + f"/start - –ó–Ω–∞–π–æ–º—Å—Ç–≤–æ\n"
                                  + f"/create_order - –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞—è–≤–∫—É\n"
                                  + f"/find_by_phone - –®—É–∫–∞—Ç–∏ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É\n"
                                  + f"/find_by_name - –®—É–∫–∞—Ç–∏ –∑–∞ —ñ–º'—è–º\n"
                                  + f"/find_by_dob - –®—É–∫–∞—Ç–∏ –∑–∞ –¥–∞—Ç–æ—é –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è\n"
                                  + f"/find_by_address - –®—É–∫–∞—Ç–∏ –∑–∞ –∞–¥—Ä–µ—Å–æ—é\n"
                                  + "/find_by_order - –®—É–∫–∞—Ç–∏ –∑–∞ –Ω–æ–º–µ—Ä–æ–º –∑–∞—è–≤–∏\n"
                                  + f"/help - –î–æ–∫–ª–∞–¥–Ω–∏–π –ø–µ—Ä–µ–ª—ñ–∫ –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π")
        update.message.reply_text("/find_by_phone - –ü–æ—à—É–∫ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É\n\n"
                                  + "–ù–æ–º–µ—Ä –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –≤–∏–≥–ª—è–¥—É: 0972623168\n"
                                  + "UPD: —Ç–µ–ø–µ—Ä –≤ –±—É–¥—å-—è–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ\n\n"
                                  + "–í–∞—Ä—ñ–∞–Ω—Ç–∏ –∑–∞–ø—Ä–æ—Å—ñ–≤: \n\n"
                                  + "+380 (97) 262 31 68\n"
                                  + "+38097 262 31 68\n"
                                  + "+380972623168\n"
                                  + "0972623168\n"
                                  + "972623168\n"
                                  + "–ù–æ–º–µ—Ä–∏ –≤ —ñ–Ω—à–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö –Ω–µ–ø—Ä–∏–ø—É—Å—Ç–∏–º—ñ.")
        update.message.reply_text("/find_by_name - –ü–æ—à—É–∫ –∑–∞ —ñ–º'—è–º\n\n"
                                  + "–í–∞—Ä—ñ–∞–Ω—Ç–∏ –∑–∞–ø—Ä–æ—Å—ñ–≤:\n\n"
                                  + "–ó–∞ –ø—Ä—ñ–∑–≤–∏—â–µ–º:\n"
                                  + "      –í'—é–Ω\n\n"
                                  + "–ó–∞ –ø—Ä—ñ–∑–≤–∏—â–µ–º —Ç–∞ —ñ–º'—è–º:\n"
                                  + "      –í'—é–Ω –í'—è—á–µ—Å–ª–∞–≤\n\n"
                                  + "–ó–∞ –ø–æ–≤–Ω–∏–º —ñ–º'—è–º:\n"
                                  + "      –í'—é–Ω –í'—è—á–µ—Å–ª–∞–≤ –î–µ–º'—è–Ω–æ–≤–∏—á\n\n"
                                  + "–ó–∞ —ñ–º'—è–º —Ç–∞ –ø–æ-–±–∞—Ç—å–∫–æ–≤—ñ (–º–æ–∂–ª–∏–≤—ñ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è):\n"
                                  + "      –í'—è—á–µ—Å–ª–∞–≤ –î–µ–º'—è–Ω–æ–≤–∏—á\n\n"
                                  + "–í –º–∞–π–±—É—Ç–Ω—å–æ–º—É –±—É–¥—É—Ç—å —ñ —á–∞—Å—Ç–∫–æ–≤—ñ —ñ–º–µ–Ω–∞, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:\n\n"
                                  + "–ó–∞—Ö–∞—Ä—á –í–æ–ª–æ–¥ –û–ª–µ–∫—Å –∞–±–æ –í'—é–Ω –í –î")
        update.message.reply_text("/find_by_dob - –ü–æ—à—É–∫ –∑–∞ –¥–∞—Ç–æ—é –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è\n\n"
                                  + "–§–æ—Ä–º–∞—Ç: —á–∏—Å–ª–æ –º—ñ—Å—è—Ü—å —Ä—ñ–∫\n\n"
                                  + "–í–∞—Ä—ñ–∞–Ω—Ç–∏ –∑–∞–ø—Ä–æ—Å—ñ–≤:\n\n"
                                  + "21.10.1962\n"
                                  + "21 –∂–æ–≤ 1962\n"
                                  + "21 –∂–æ–≤ 1962\n"
                                  + "21 –æ–∫—Ç 1962\n"
                                  + "21 –æ–∫—Ç—è–±—Ä—è 1962\n")
        update.message.reply_text("/find_by_address - –ü–æ—à—É–∫ –∑–∞ –∞–¥—Ä–µ—Å–æ—é\n\n"
                                  + "–ù–∞–π—Å–∫–ª–∞–¥–Ω—ñ—à–∏–π –≤–∏–¥ –ø–æ—à—É–∫—É\n\n"
                                  + "–ù–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –≤—ñ–Ω –≤–º—ñ—î —à—É–∫–∞—Ç–∏ –∑–∞ —Ç–æ—á–Ω–∏–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏:\n"
                                  + "—Ç–∞–∫, —è–∫ –≤–æ–Ω–∏ –±—É–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ñ –≤ –∑–∞—è–≤–∫–∞—Ö.\n\n"
                                  + "–í –º–∞–π–±—É—Ç–Ω—å–æ–º—É –±—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –±—ñ–ª—å—à –≥–Ω—É—á–∫–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç.\n\n"
                                  + "–í–∞—Ä—ñ–∞–Ω—Ç–∏ –∑–∞–ø—Ä–æ—Å—ñ–≤:\n\n"
                                  + "–ö—Ä–∏–ª–æ–≤–∞\n"
                                  + "–ö—Ä–∏–ª–æ–≤–∞ 12\n"
                                  + "–ö—Ä–∏–ª–æ–≤–∞, 12\n")
        update.message.reply_text("/find_by_order - –®—É–∫–∞—Ç–∏ –∑–∞ –Ω–æ–º–µ—Ä–æ–º –∑–∞—è–≤–∏\n\n"
                                  + "–í–∞—Ä—ñ–∞–Ω—Ç –∑–∞–ø—Ä–æ—Å—É:\n\n"
                                  + "5111\n")
        update.message.reply_text("/create_order - –ú–µ—Ö–∞–Ω—ñ–∑–º —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞—è–≤–æ–∫\n\n"
                                  + "–ù–∞–¥–≤–∞–∂–ª–∏–≤–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑—É!!!\n")
    else:
        update.message.reply_text("–î–æ–ø–æ–º–æ–≥–∞ –≤–∂–µ –±–ª–∏–∑—å–∫–æ.\n"
                                  + "–ù–µ—Ö–∞–π –©–∞—Å—Ç–∏—Ç—å!")


def error(update, context):
    # function to handle errors occured in the dispatcher
    update.message.reply_text('–Ø–∫–∞—Å—å –Ω–µ–≤—ñ–¥–æ–º–∞ —Ö—Ä—î–Ω—å')


def text_handler(update, context):
    # function to handle normal text
    global STATE
    user = update.message.chat.username
    if is_permitted(user):
        if STATE == ORD_NUM:
            return received_ordnum(update, context)

        if STATE == PHONE:
            return received_phone(update, context)

        if STATE == DOB:
            return received_dob(update, context)

        if STATE == NAME:
            return received_name(update, context)

        if STATE == ADDRESS:
            return received_address(update, context)

        if STATE == CREATE:
            return received_create(update, context)
    else:
        update.message.reply_text("–í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ")


def main():
    global CONFIG
    global DB

    config = configparser.ConfigParser()
    config.read(f"{project_root()}/../.nikobot.ini")
    CONFIG = config["NikoBot"]
    TOKEN = CONFIG["TOKEN"]
    mongodb = CONFIG["mongodb"]
    cert = CONFIG["cert"]

    # create the updater, that will automatically create also a dispatcher and a queue to
    # make them dialoge
    updater = Updater(TOKEN, use_context=True)
    # BOT = updater.bot
    dispatcher = updater.dispatcher

    # os = platform.system()
    with MongoClient(mongodb,
                     tls=True,
                     tlsCertificateKeyFile=cert,
                     server_api=ServerApi('1')) as client:
        DB = client.nikovolunteers

        # handlers for start and help commands
        dispatcher.add_handler(CommandHandler("start", start))
        dispatcher.add_handler(CommandHandler("help", help))

        # handlers for search commands
        dispatcher.add_handler(CommandHandler("find_by_name", find_by_name))
        dispatcher.add_handler(CommandHandler(
            "find_by_order", find_by_order))
        dispatcher.add_handler(CommandHandler("find_by_phone", find_by_phone))
        dispatcher.add_handler(CommandHandler("find_by_dob", find_by_dob))
        dispatcher.add_handler(CommandHandler(
            "find_by_address", find_by_address))

        # handler for save command
        dispatcher.add_handler(CommandHandler("create_order", create_order))

        # handler for normal text (not commands)
        dispatcher.add_handler(MessageHandler(Filters.text, text_handler))

        # handler for errors
        dispatcher.add_error_handler(error)

        # start your shiny new bot
        updater.start_polling()

        # run the bot until Ctrl-C
        updater.idle()


if __name__ == '__main__':
    main()
